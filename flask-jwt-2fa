from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import pyotp
import jwt
import datetime
from functools import wraps
import qrcode
from io import BytesIO
import base64

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://username:password@localhost/db_name'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your_secret_key'
db = SQLAlchemy(app)

# Database Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(256), nullable=False)
    twofa_secret = db.Column(db.String(256), nullable=False)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255), nullable=False)
    price = db.Column(db.Numeric(10, 2), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)

# Helper Function for JWT Token Verification
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('x-access-token')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 403
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
            current_user = User.query.filter_by(username=data['username']).first()
        except:
            return jsonify({'message': 'Invalid token!'}), 403
        return f(current_user, *args, **kwargs)
    return decorated

# User Registration
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = generate_password_hash(data['password'], method='sha256')
    secret = pyotp.random_base32()
    new_user = User(username=data['username'], password=hashed_password, twofa_secret=secret)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User registered successfully!', '2FA_secret': secret})

# Generate QR Code for Google Authenticator
@app.route('/qrcode/<username>', methods=['GET'])
def generate_qrcode(username):
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({'message': 'User not found'}), 404
    otp_uri = pyotp.totp.TOTP(user.twofa_secret).provisioning_uri(username, issuer_name='FlaskApp')
    qr = qrcode.make(otp_uri)
    buf = BytesIO()
    qr.save(buf, format='PNG')
    qr_base64 = base64.b64encode(buf.getvalue()).decode()
    return jsonify({'qrcode': qr_base64})

# Login with 2FA
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if not user or not check_password_hash(user.password, data['password']):
        return jsonify({'message': 'Invalid username or password'}), 401
    totp = pyotp.TOTP(user.twofa_secret)
    if not totp.verify(data['token']):
        return jsonify({'message': 'Invalid 2FA token'}), 401
    token = jwt.encode({'username': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=10)}, app.config['SECRET_KEY'])
    return jsonify({'token': token})

# CRUD Operations for Products
@app.route('/products', methods=['POST'])
@token_required
def create_product(current_user):
    data = request.get_json()
    new_product = Product(name=data['name'], description=data['description'], price=data['price'], quantity=data['quantity'])
    db.session.add(new_product)
    db.session.commit()
    return jsonify({'message': 'Product created successfully'})

@app.route('/products', methods=['GET'])
@token_required
def get_products(current_user):
    products = Product.query.all()
    output = [{'id': p.id, 'name': p.name, 'description': p.description, 'price': float(p.price), 'quantity': p.quantity} for p in products]
    return jsonify(output)

@app.route('/products/<int:id>', methods=['PUT'])
@token_required
def update_product(current_user, id):
    data = request.get_json()
    product = Product.query.get(id)
    if not product:
        return jsonify({'message': 'Product not found'}), 404
    product.name = data['name']
    product.description = data['description']
    product.price = data['price']
    product.quantity = data['quantity']
    db.session.commit()
    return jsonify({'message': 'Product updated successfully'})

@app.route('/products/<int:id>', methods=['DELETE'])
@token_required
def delete_product(current_user, id):
    product = Product.query.get(id)
    if not product:
        return jsonify({'message': 'Product not found'}), 404
    db.session.delete(product)
    db.session.commit()
    return jsonify({'message': 'Product deleted successfully'})

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)
